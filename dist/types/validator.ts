// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/auth/error/page.tsx
{
  const handler = {} as typeof import("../../src/app/auth/error/page.js")
  handler satisfies AppPageConfig<"/auth/error">
}

// Validate ../../src/app/auth/signin/page.tsx
{
  const handler = {} as typeof import("../../src/app/auth/signin/page.js")
  handler satisfies AppPageConfig<"/auth/signin">
}

// Validate ../../src/app/auth/signup/page.tsx
{
  const handler = {} as typeof import("../../src/app/auth/signup/page.js")
  handler satisfies AppPageConfig<"/auth/signup">
}

// Validate ../../src/app/discover/page.tsx
{
  const handler = {} as typeof import("../../src/app/discover/page.js")
  handler satisfies AppPageConfig<"/discover">
}

// Validate ../../src/app/login/page.tsx
{
  const handler = {} as typeof import("../../src/app/login/page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ../../src/app/memories/page.tsx
{
  const handler = {} as typeof import("../../src/app/memories/page.js")
  handler satisfies AppPageConfig<"/memories">
}

// Validate ../../src/app/memory-weaver/page.tsx
{
  const handler = {} as typeof import("../../src/app/memory-weaver/page.js")
  handler satisfies AppPageConfig<"/memory-weaver">
}

// Validate ../../src/app/my-memories/page.tsx
{
  const handler = {} as typeof import("../../src/app/my-memories/page.js")
  handler satisfies AppPageConfig<"/my-memories">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/signup/page.tsx
{
  const handler = {} as typeof import("../../src/app/signup/page.js")
  handler satisfies AppPageConfig<"/signup">
}

// Validate ../../src/app/test-auth/page.tsx
{
  const handler = {} as typeof import("../../src/app/test-auth/page.js")
  handler satisfies AppPageConfig<"/test-auth">
}

// Validate ../../src/app/test-discord/page.tsx
{
  const handler = {} as typeof import("../../src/app/test-discord/page.js")
  handler satisfies AppPageConfig<"/test-discord">
}

// Validate ../../src/app/api/ai/analyze-memory/route.ts
{
  const handler = {} as typeof import("../../src/app/api/ai/analyze-memory/route.js")
  handler satisfies RouteHandlerConfig<"/api/ai/analyze-memory">
}

// Validate ../../src/app/api/auth/[...nextauth]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/[...nextauth]/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/[...nextauth]">
}

// Validate ../../src/app/api/auth/discord/create-user/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/discord/create-user/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/discord/create-user">
}

// Validate ../../src/app/api/auth/signup/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/signup/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/signup">
}

// Validate ../../src/app/api/auth/simple-test/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/simple-test/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/simple-test">
}

// Validate ../../src/app/api/health/route.ts
{
  const handler = {} as typeof import("../../src/app/api/health/route.js")
  handler satisfies RouteHandlerConfig<"/api/health">
}

// Validate ../../src/app/api/setup/route.ts
{
  const handler = {} as typeof import("../../src/app/api/setup/route.js")
  handler satisfies RouteHandlerConfig<"/api/setup">
}

// Validate ../../src/app/api/user/profile/route.ts
{
  const handler = {} as typeof import("../../src/app/api/user/profile/route.js")
  handler satisfies RouteHandlerConfig<"/api/user/profile">
}

// Validate ../../src/app/auth/test/route.ts
{
  const handler = {} as typeof import("../../src/app/auth/test/route.js")
  handler satisfies RouteHandlerConfig<"/auth/test">
}





// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}
