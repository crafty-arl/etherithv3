// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  username           String   @unique
  fullName           String
  avatarUrl          String?
  bio                String?
  culturalBackground String[]
  dateOfBirth        DateTime?
  location           Json?
  isVerified         Boolean  @default(false)
  verificationLevel  Int      @default(1)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  memories           Memory[]
  communityMemberships CommunityMembership[]

  @@map("users")
}

model Memory {
  id                      String   @id @default(cuid())
  userId                  String
  title                   String
  description             String?
  contentType             String
  ipfsHash                String
  ipfsGatewayUrl          String?
  fileSize                BigInt?
  mimeType                String?
  culturalContext         String[]
  culturalSignificanceScore Decimal? @db.Decimal(3, 2)
  tags                    String[]
  isPublic                Boolean  @default(true)
  accessLevel             String   @default("public")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user                   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata               MemoryMetadata[]
  communityAccess        CommunityMemoryAccess[]

  @@map("memories")
}

model MemoryMetadata {
  id                    String   @id @default(cuid())
  memoryId              String
  aiGeneratedMetadata   Json
  culturalTags          String[]
  language              String?
  locationContext       Json?
  temporalContext       Json?
  peopleMentioned       String[]
  culturalPractices     String[]
  significanceDescription String?
  createdAt             DateTime @default(now())

  memory                Memory             @relation(fields: [memoryId], references: [id], onDelete: Cascade)

  @@map("memory_metadata")
}

model CulturalCommunity {
  id                String   @id @default(cuid())
  name              String
  description       String?
  culturalFocus     String[]
  location          Json?
  memberCount       Int      @default(0)
  isVerified        Boolean  @default(false)
  verificationLevel Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  members           CommunityMembership[]
  memoryAccess      CommunityMemoryAccess[]

  @@map("cultural_communities")
}

model CommunityMembership {
  id          String   @id @default(cuid())
  userId      String
  communityId String
  role        String   @default("member")
  joinedAt    DateTime @default(now())
  isActive    Boolean  @default(true)

  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  community   CulturalCommunity @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@map("community_memberships")
}

model CommunityMemoryAccess {
  id          String   @id @default(cuid())
  memoryId    String
  communityId String
  accessLevel String   @default("read")
  grantedAt   DateTime @default(now())

  memory      Memory             @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  community   CulturalCommunity @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([memoryId, communityId])
  @@map("community_memory_access")
}
